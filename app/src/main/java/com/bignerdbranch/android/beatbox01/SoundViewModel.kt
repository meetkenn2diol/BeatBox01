package com.bignerdbranch.android.beatbox01

import android.widget.SeekBar
import android.widget.Toast
import androidx.appcompat.widget.AppCompatSeekBar
import androidx.appcompat.widget.AppCompatTextView
import androidx.databinding.BaseObservable
import androidx.databinding.Bindable

/**
 * Make the view model communicate with the layout file when a change occurs.To do this, your view model needs to implement data binding’s Observable interface. This interface lets your binding class set listeners on your view model so that it can automatically receive callbacks when its fields are modified. This is also important for proper work flow arrangement.
 * Three steps are required:
 *1. Subclass BaseObservable in your view model.
 *2. Annotate your view model’s bindable properties with @Bindable.
 *3. Call notifyChange() or notifyPropertyChanged(Int) each time a bindable property’s value changes.
 *
 * @param beatBox: a BeatBox object for playing Sound
 * @see   com.bignerdbranch.android.beatbox01.BeatBox
 */
class SoundViewModel(
    private val beatBox: BeatBox,
    private val seekBar: AppCompatSeekBar,
    private val seekBarLabel: AppCompatTextView,
    private val mainActivity: MainActivity
) : BaseObservable() {

    init {
        seekBar.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {

                //modify the input from the seekbar to correspond to android's soundpool speedrate
                val rate = when {
                    progress > 100 -> (progress) / 100.0
                    progress >= 0 -> (progress + 100) / 200.0
                    else -> 1.0
                }
                //Toast the new rate
                Toast.makeText(mainActivity, "The new rate: ${rate}", Toast.LENGTH_SHORT)
                    .show()
                //update the appcompattextview to reflect the change
                seekBarLabel.setText(
                    mainActivity.getString(
                        R.string.seekbar_label_message,
                        rate.toString()
                    )
                )
                //change the rate in beatbox
                beatBox.setMRate(rate)
            }

            override fun onStartTrackingTouch(seekBar: SeekBar) {}
            override fun onStopTrackingTouch(seekBar: SeekBar) {}
        })

        seekBar.progress = 100
    }


    var sound: Sound? = null
        set(sound) {
            field = sound
            notifyChange()
            /** //if your want to specify the attribute that has changed
            notifyPropertyChanged(BR.title)
            //NOTE: BR is an autogenerated class (Binding Resource)
             */
        }

    @get:Bindable
    val title: String?
        get() = sound?.name

    /** A function to call when an AppCompatButton connected to this SoundViewModel is clicked*/
    fun onButtonClicked() {
        sound?.let {
            beatBox.play(it)
        }
    }


}


/**
 * USING LIVEDATA RATHER THAN OBSERVABLE
class SoundViewModel{
val title: MutableLiveData<String?> = MutableLiveData()
var sound: Sound? = null
set(sound) {
field = sound
title.postValue(sound?.name)
}
 */